#!/bin/bash
#
# Copyright (C) 2023 Masatake YAMATO <yamato@redhat.com>
#
# This file is part of util-linux.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
TS_TOPDIR="${0%/*}/../.."
TS_DESC="mqueue with fork"

. "$TS_TOPDIR"/functions.sh
ts_init "$*"

ts_check_test_command "$TS_CMD_LSFD"
ts_check_test_command "$TS_HELPER_MKFDS"
ts_check_native_byteorder

ts_cd "$TS_OUTDIR"

MQUEUE=/mkfds-mqueue
PID0=
PID1=
FD0=3
FD1=4
EXPR=
INODE0=
INODE1=
ENDPOINTS=

{
    coproc MKFDS { "$TS_HELPER_MKFDS" mqueue $FD0 $FD1 path=${MQUEUE}; }
    if read -u ${MKFDS[0]} PID0 PID1; then
	EXPR='(FD == '"$FD0"') or (FD =='"$FD1"')'
	${TS_CMD_LSFD} -p "${PID0}" -n -o ASSOC,MODE,TYPE,SOURCE,NAME -Q "${EXPR}"
	echo 'parent: ASSOC,MODE,TYPE,SOURCE,NAME': $?

	INODE0=$(${TS_CMD_LSFD} -p "${PID0}" --raw -n -o INODE -Q "${EXPR}")
	echo 'parent: INODE': $?

	EXPR='(FD == '"$FD0"') or (FD =='"$FD1"')'
	${TS_CMD_LSFD} -p "${PID1}" -n -o ASSOC,MODE,TYPE,SOURCE -Q "${EXPR}"
	echo 'child: ASSOC,MODE,TYPE,SOURCE': $?

	INODE1=$(${TS_CMD_LSFD} -p "${PID1}" --raw -n -o INODE -Q "${EXPR}")
	echo 'child: INODE': $?

	if [ "${INODE0}" == "${INODE1}" ]; then
	    echo 'INODE[STR]:' $?
	else
	    echo 'INODE[STR]:' $?
	    echo INODE0: "${INODE0}"
	    echo INODE1: "${INODE1}"
	fi

	EXPR='(INODE == '"${INODE0}"') and (TYPE == "mqueue")'
	ENDPOINTS=$(${TS_CMD_LSFD} --raw -n -o PID,ASSOC,ENDPOINTS -Q "${EXPR}")
	tmp=$(printf "%d %d %d,test_mkfds,%d-w\n%d %d %d,test_mkfds,%dr-" \
		     "$PID0" "$FD0" "$PID1" "$FD1" \
		     "$PID1" "$FD1" "$PID0" "$FD0")
	if [ "$ENDPOINTS" == "$tmp" ]; then
	    echo 'ENDPOINTS[STR]:' $?
	else
	    echo 'ENDPOINTS[STR]:' $?
	    echo 'ENDPOINTS:' "$ENDPOINTS"
	    echo 'lsfd:' "$tmp"
	    grep mqueue /proc/self/mountinfo
	fi

	echo DONE >&"${MKFDS[1]}"
    fi
    wait ${MKFDS_PID}
} > $TS_OUTPUT 2>&1

ts_finalize
