#!/bin/bash
#
# Copyright (C) 2022 Masatake YAMATO <yamato@redhat.com>
#
# This file is part of util-linux.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
TS_TOPDIR="${0%/*}/../.."
TS_DESC="UNIX sockets made in a differenct net namespace"

. "$TS_TOPDIR"/functions.sh
ts_init "$*"
ts_skip_nonroot

. "$TS_SELF/lsfd-functions.bash"

ts_check_test_command "$TS_CMD_LSFD"

ts_check_test_command "$TS_HELPER_MKFDS"

ts_cd "$TS_OUTDIR"

PID=
FDSELFNS=3
FDALTNS=4
FDSOCK=5

EXPR='((TYPE == "UNIX") or (TYPE == "UNIX-STREAM")) and (FD == 5)'

compare_net_namespaces()
{
    local type=$1
    local pid=$2
    local altns_inode
    local sock_netns

    altns_inode=$(${TS_CMD_LSFD} -n -o INODE -p "${pid}" -Q '(FD == 4)')
    sock_netns=$(${TS_CMD_LSFD} -n -o SOCK.NETNS -p "${pid}" -Q '(FD == 5)')

    if [[ "${altns_inode}" == "${sock_netns}" ]]; then
	echo "the netns for the $type socket is extracted as expectedly"
    else
	echo "the netns for the $type socket is not extracted well"
	echo "altns_inode=${altns_inode}"
	echo "sock_netns=${sock_netns}"
    fi
}

{
    for t in stream dgram seqpacket; do
	coproc MKFDS { "$TS_HELPER_MKFDS" unix-in-netns $FDSELFNS $FDALTNS $FDSOCK \
					  path=test_mkfds-unix-$t-ns \
					  type=$t ; }
	if read -r -u "${MKFDS[0]}" PID; then
	    ${TS_CMD_LSFD} -n \
			   -o ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH \
			   -p "${PID}" -Q "${EXPR}"
	    echo 'ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH': $?

	    compare_net_namespaces "$t" "${PID}"

	    kill -CONT "${PID}"
	fi
	wait "${MKFDS_PID}"
	if [[ $? == "$UNSUPPORTED" ]]; then
	    ts_skip "unshare(2) is not permitted"
        fi

	coproc MKFDS { "$TS_HELPER_MKFDS" unix-in-netns $FDSELFNS $FDALTNS $FDSOCK \
					  path=test_mkfds-unix-$t-ns \
					  abstract=true \
					  type=$t ; }
	if read -r -u "${MKFDS[0]}" PID; then
	    ${TS_CMD_LSFD} -n \
			   -o ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH \
			   -p "${PID}" -Q "${EXPR}"
	    echo 'ASSOC,STTYPE,NAME,SOCK.STATE,SOCK.TYPE,SOCK.LISTENING,UNIX.PATH': $?

	    compare_net_namespaces "abstract $t" "${PID}"

	    kill -CONT "${PID}"
	fi
	wait "${MKFDS_PID}"
	if [[ $? == "$UNSUPPORTED" ]]; then
	    ts_skip "unshare(2) is not permitted"
        fi
    done
} > "$TS_OUTPUT" 2>&1

ts_finalize
